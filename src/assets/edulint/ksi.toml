[pylint]
enable = [
    "use-augmenting-assignment",
    "redefined-builtin",
    "use-foreach",
    "simplifiable-if-return",
    "simplifiable-if-nested",
    "unused-argument",
    "use-for-loop",
    "duplicate-if-branches",
    "redefined-outer-name",
    "no-is-bool",
    "redundant-arithmetic",
    "unreachable",
    "duplicate-value",
    "use-literal-letter",
    "use-ord-letter",
    "simplifiable-if-expr",
    "simplifiable-if-pass",
    "modifying-iterated-structure",
    "no-loop-else",
    "use-integral-division",
    "redefined-argument-from-local",
    "pointless-statement",
    "simplifiable-if-assignment",
    "attribute-defined-outside-init",
    "loop-shadows-control-variable",
    "changing-control-variable",
    "self-assigning-variable",
    "dangerous-default-value",
    "unnecessary-dunder-call",
    "unnecessary-dict-index-lookup",
    "unidiomatic-typecheck",
    "comparison-of-constants",
    "comparison-with-itself",
    "remove-for",
    "simplifiable-condition",
    "condition-evals-to-constant",
    "unreachable-else",
    "non-ascii-name",
    "no-self-argument",
    "comparison-with-callable",
    "for-target-subscript",
    "function-redefined",
    "missing-parentheses-for-call-in-test",
    "method-hidden",
    "duplicate-key",
]


[flake8]
select = [
    "E501", # line too long (82 > 79 characters)
    "F841", # local variable name is assigned to but never used
    "E999", # Syntax error
    "F821", # undefined name name
    "E112", # expected an indented block
    "E712", # comparison to True should be ‘if cond is True:’ or ‘if cond:’
    "E711", # comparison to None should be ‘if cond is None:’
    "E701", # multiple statements on one line (colon)
    "E101", # indentation contains mixed spaces and tabs
    "E113", # unexpected indentation
    "E713", # test for membership should be ‘not in’
    "E902", # IOError
    "W605", # invalid escape sequence ‘x’
    "F811", # redefinition of unused name from line N
    "E131", # continuation line unaligned for hanging indent
    "F541", # f-string without any placeholders
    "F601", # dictionary key name repeated with different values
    "F632", # use ==/!= to compare str, bytes, and int literals
    "F823", # local variable name … referenced before assignment
    "E702", # multiple statements on one line (semicolon)
    "E714", # test for object identity should be ‘is not’
    "E721", # do not compare types, use ‘isinstance()’
    "E742", # do not define classes named ‘l’, ‘O’, or ‘I’
    "E743", # do not define functions named ‘l’, ‘O’, or ‘I’
    "E901", # SyntaxError or IndentationError
    "F402", # import module from line N shadowed by loop variable
    "F404", # future import(s) name after other statements
    "F406", # ‘from module import *’ only allowed at module level
    "F407", # an undefined __future__ feature name was imported
    "F501", # invalid % format literal
    "F502", # % format expected mapping but got sequence
    "F503", # % format expected sequence but got mapping
    "F504", # % format unused named arguments
    "F505", # % format missing named arguments
    "F506", # % format mixed positional and named arguments
    "F507", # % format mismatch of placeholder and argument count
    "F508", # % format with * specifier requires a sequence
    "F509", # % format with unsupported format character
    "F521", # .format(...) invalid format string
    "F522", # .format(...) unused named arguments
    "F523", # .format(...) unused positional arguments
    "F524", # .format(...) missing argument
    "F525", # .format(...) mixing automatic and manual numbering
    "F602", # dictionary key variable name repeated with different values
    "F621", # too many expressions in an assignment with star-unpacking
    "F622", # two or more starred expressions in an assignment (a, *b, *c = d)
    "F631", # assertion test is a tuple, which is always True
    "F633", # use of >> is invalid with print function
    "F634", # if test is a tuple, which is always True
    "F701", # a break statement outside of a while or for loop
    "F702", # a continue statement outside of a while or for loop
    "F703", # a continue statement in a finally block in a loop
    "F704", # a yield or yield from statement outside of a function
    "F705", # a return statement with arguments inside a generator
    "F706", # a return statement outside of a function/method
    "F707", # an except: block as not the last exception handler
    "F721", # syntax error in doctest
    "F722", # syntax error in forward annotation
    "F723", # syntax error in type comment
    "F822", # undefined name name in __all__
    "F831", # duplicate argument name in function definition
    "F901", # raise NotImplemented should be raise NotImplementedError
    "W601", # .has_key() is deprecated, use ‘in’
    "W602", # deprecated form of raising exception
    "W603", # ‘<>’ is deprecated, use ‘!=’
    "W604", # backticks are deprecated, use ‘repr()’
    "W606", # ‘async’ and ‘await’ are reserved keywords starting with Python 3.7
]
max-line-length = "200"
